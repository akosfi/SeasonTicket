// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Data;

namespace server.Migrations
{
    [DbContext(typeof(TicketContext))]
    [Migration("20181010055141_Added table CheckIn")]
    partial class AddedtableCheckIn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("server.Models.Business", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<int>("userID");

                    b.HasKey("ID");

                    b.HasIndex("userID");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("server.Models.CheckIn", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate");

                    b.Property<int>("transactionID");

                    b.HasKey("ID");

                    b.HasIndex("transactionID");

                    b.ToTable("CheckIn");
                });

            modelBuilder.Entity("server.Models.GoogleLogin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GoogleID");

                    b.Property<int>("userID");

                    b.HasKey("ID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("GoogleLogins");
                });

            modelBuilder.Entity("server.Models.Place", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.Property<int>("businessID");

                    b.HasKey("ID");

                    b.HasIndex("businessID");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("server.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DaysOfValidity");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OccasionNumber");

                    b.Property<int>("Price");

                    b.Property<int>("businessID");

                    b.HasKey("ID");

                    b.HasIndex("businessID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("server.Models.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OccasionNumber");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("ticketID");

                    b.Property<int>("userID");

                    b.HasKey("ID");

                    b.HasIndex("ticketID");

                    b.HasIndex("userID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email");

                    b.Property<string>("ProfilePic");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("server.Models.Business", b =>
                {
                    b.HasOne("server.Models.User", "User")
                        .WithMany("Businesses")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("server.Models.CheckIn", b =>
                {
                    b.HasOne("server.Models.Transaction", "Transaction")
                        .WithMany("CheckIns")
                        .HasForeignKey("transactionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("server.Models.GoogleLogin", b =>
                {
                    b.HasOne("server.Models.User", "User")
                        .WithOne("GoogleLogin")
                        .HasForeignKey("server.Models.GoogleLogin", "userID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("server.Models.Place", b =>
                {
                    b.HasOne("server.Models.Business", "Business")
                        .WithMany("Places")
                        .HasForeignKey("businessID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("server.Models.Ticket", b =>
                {
                    b.HasOne("server.Models.Business", "Business")
                        .WithMany("Tickets")
                        .HasForeignKey("businessID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("server.Models.Transaction", b =>
                {
                    b.HasOne("server.Models.Ticket", "Ticket")
                        .WithMany("Transactions")
                        .HasForeignKey("ticketID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("server.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
